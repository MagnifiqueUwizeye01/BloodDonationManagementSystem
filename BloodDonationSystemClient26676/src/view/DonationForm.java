/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.DonationDao;
import dao.DonorDao;
import model.Donation;
import model.User;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import rmi.DonationService;
import java.rmi.RemoteException;
import rmi.DonorService;
import rmi.DonationService;


import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.event.ActionEvent;
import java.io.FileOutputStream;
import java.io.IOException;



/**
 *
 * @author User
 */
public class DonationForm extends javax.swing.JPanel {
 private User currentUser;
 private DonationService donationService;
 private DonorService donorService;
 
 
  public DonationForm(User currentUser, DonorService donorService, DonationService donationService) {
    this.currentUser = currentUser;
    this.donorService = donorService;
    this.donationService = donationService;
    initComponents();
    this.setPreferredSize(new Dimension(1000, 700));

    loadDonors();
    initializeTable();
    
    
    try {
    Registry registry = LocateRegistry.getRegistry("localhost", 5000);
    donationService = (DonationService) registry.lookup("donation");
    System.out.println("[DonationForm] ‚úÖ Connected to DonationService");
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "‚ùå Failed to connect to DonationService: " + e.getMessage(),
            "Connection Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}
this.addAncestorListener(new javax.swing.event.AncestorListener() {
    @Override
    public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
        loadDonors(); // Automatically refresh donor list when this panel is shown
    }

    @Override
    public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {}

    @Override
    public void ancestorMoved(javax.swing.event.AncestorEvent evt) {}
});

}
  

private void initializeTable() {
    String[] columns = {"ID", "Donor ID", "Date", "Volume (ml)", "Remarks"};
    DefaultTableModel model = new DefaultTableModel(columns, 0) {
        @Override public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    jTable1.setModel(model);
    refreshDonationsTable();
}


    /**
     * Creates new form DonatioPanel
     */
    public DonationForm() {
        initComponents();
        
    }

   private void loadDonors() {
    try {
        donorComboBox.removeAllItems();

        // üß† RMI-based call instead of DonorDao
        List<String> donors = donorService.getAllDonorsFormatted();

        if (donors.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please add donors first", "No Donors", JOptionPane.INFORMATION_MESSAGE);
        } else {
            donors.forEach(donorComboBox::addItem);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "‚ùå Failed to load donors: " + e.getMessage(),
                "Remote Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }


}
   
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        donorComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        dateField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        volumeField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        remarksField = new javax.swing.JTextField();
        recordDonationBtn = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        tableScrollPane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        deleteDonationBtn = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        exportPdfButton = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1300, 907));

        jPanel17.setBackground(new java.awt.Color(255, 220, 221));
        jPanel17.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));

        jPanel18.setBackground(new java.awt.Color(220, 20, 60));
        jPanel18.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 10, 0));
        jPanel18.setMaximumSize(new java.awt.Dimension(32767, 50));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("DONATION RECORDING");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(473, 473, 473))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        jPanel19.setBackground(new java.awt.Color(255, 255, 255));
        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Donor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(70, 70, 70));
        jLabel10.setText("Donor:");

        donorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        donorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donorComboBoxActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(70, 70, 70));
        jLabel11.setText("Donation Date (YYYY-MM-DD):");

        dateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFieldActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Volume (ml):");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setText("Remarks:");

        remarksField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remarksFieldActionPerformed(evt);
            }
        });

        recordDonationBtn.setBackground(new java.awt.Color(40, 167, 69));
        recordDonationBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        recordDonationBtn.setForeground(new java.awt.Color(255, 255, 255));
        recordDonationBtn.setText("Record Donation");
        recordDonationBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        recordDonationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordDonationBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(359, 359, 359)
                                .addComponent(jLabel10))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(357, 357, 357)
                                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12)))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(358, 358, 358)
                                .addComponent(jLabel11))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(306, 306, 306)
                                .addComponent(donorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(volumeField, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addComponent(remarksField, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(recordDonationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(donorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addGap(2, 2, 2)
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volumeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(remarksField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(recordDonationBtn)))
                .addContainerGap())
        );

        jPanel20.setBackground(new java.awt.Color(255, 255, 255));
        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Donations List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Donor ID", "Date", "Volume (ml)", "Remarks"
            }
        ));
        tableScrollPane.setViewportView(jTable1);

        deleteDonationBtn.setBackground(new java.awt.Color(220, 53, 69));
        deleteDonationBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteDonationBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteDonationBtn.setText("Delete Selected");
        deleteDonationBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteDonationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDonationBtnActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(43, 87, 154));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update Donation");
        btnUpdate.setBorder(new javax.swing.border.MatteBorder(null));
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        exportPdfButton.setBackground(new java.awt.Color(153, 204, 255));
        exportPdfButton.setText("Export to PDF");
        exportPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPdfButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1234, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(deleteDonationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(294, 294, 294)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel20Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportPdfButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(exportPdfButton)
                .addGap(25, 25, 25)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteDonationBtn)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        btnSearch.setBackground(new java.awt.Color(255, 255, 155));
        btnSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSearch.setText("Search Donation");
        btnSearch.setBorder(new javax.swing.border.MatteBorder(null));
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 801, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void donorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donorComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_donorComboBoxActionPerformed

    private void dateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateFieldActionPerformed

    private void remarksFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remarksFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remarksFieldActionPerformed

    private void recordDonationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordDonationBtnActionPerformed
       if (donorComboBox.getSelectedItem() == null) {
        showError("Validation Error", "Please select a donor");
        return;
    }

    try {
        String dateText = dateField.getText().trim();
        if (!dateText.matches("\\d{4}-\\d{2}-\\d{2}")) {
            showError("Invalid Date", "Please use YYYY-MM-DD format");
            return;
        }

        java.time.LocalDate donationDate = java.time.LocalDate.parse(dateText);
        if (donationDate.isAfter(java.time.LocalDate.now())) {
            showError("Invalid Date", "Date cannot be in the future");
            return;
        }

        int volume = Integer.parseInt(volumeField.getText().trim());
        if (volume < 300 || volume > 500) {
            showError("Invalid Volume", "Must be between 300-500ml");
            return;
        }

        String remarks = remarksField.getText().trim();
        if (remarks.length() > 255) {
            showError("Remarks Too Long", "Maximum 255 characters allowed");
            return;
        }

        int donorId = Integer.parseInt(((String) donorComboBox.getSelectedItem()).split("ID: ")[1].split(",")[0].trim());

        Donation donation = new Donation(0, donorId, dateText, volume, remarks);

        // ‚úÖ Call RMI service instead of local DAO
        int donationId = donationService.saveDonation(donation);

        if (donationId > 0) {
            showSuccess("Success", "Donation recorded! ID: " + donationId);
            clearFields();
            refreshDonationsTable();
        } else {
            showError("Error", "Failed to save donation");
        }
    } catch (NumberFormatException e) {
        showError("Invalid Input", "Volume must be a number");
    } catch (Exception e) {
        showError("RMI Error", "Failed to save donation: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_recordDonationBtnActionPerformed

    private void deleteDonationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDonationBtnActionPerformed
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        showError("No Selection", "Please select a donation to delete");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this,
        "Delete this donation record?", "Confirm", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        int donationId = (int) jTable1.getValueAt(selectedRow, 0);
        try {
            // ‚úÖ Use remote RMI service instead of local DAO
            boolean success = donationService.deleteDonation(donationId);

            if (success) {
                refreshDonationsTable();
                showSuccess("Success", "Donation deleted successfully!");
            } else {
                showError("Error", "Failed to delete donation");
            }

        } catch (Exception e) {
            showError("RMI Error", "Error deleting donation: " + e.getMessage());
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_deleteDonationBtnActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        showError("No Selection", "Please select a donation to update");
        return;
    }

    // Get selected donation data
    int donationId = (int) jTable1.getValueAt(selectedRow, 0);
    int donorId = (int) jTable1.getValueAt(selectedRow, 1);
    String date = (String) jTable1.getValueAt(selectedRow, 2);
    int volume = (int) jTable1.getValueAt(selectedRow, 3);
    String remarks = (String) jTable1.getValueAt(selectedRow, 4);

    // Create update panel
    JPanel updatePanel = new JPanel(new java.awt.GridLayout(0, 2, 5, 5));

    JTextField dateField = new JTextField(date);
    JTextField volumeField = new JTextField(String.valueOf(volume));
    JTextField remarksField = new JTextField(remarks);

    updatePanel.add(new JLabel("Date (YYYY-MM-DD):"));
    updatePanel.add(dateField);
    updatePanel.add(new JLabel("Volume (ml):"));
    updatePanel.add(volumeField);
    updatePanel.add(new JLabel("Remarks:"));
    updatePanel.add(remarksField);

    int result = JOptionPane.showConfirmDialog(
        this,
        updatePanel,
        "Update Donation ID: " + donationId,
        JOptionPane.OK_CANCEL_OPTION,
        JOptionPane.PLAIN_MESSAGE
    );

    if (result == JOptionPane.OK_OPTION) {
        // Validate inputs
        if (!dateField.getText().matches("\\d{4}-\\d{2}-\\d{2}")) {
            showError("Invalid Date", "Please use YYYY-MM-DD format");
            return;
        }

        try {
            int newVolume = Integer.parseInt(volumeField.getText());
            if (newVolume < 300 || newVolume > 500) {
                showError("Invalid Volume", "Must be between 300-500ml");
                return;
            }

            // ‚úÖ Updated donation
            Donation updatedDonation = new Donation(
                donationId,
                donorId,
                dateField.getText(),
                newVolume,
                remarksField.getText().trim()
            );

            // ‚úÖ Use RMI instead of local DAO
            if (donationService.updateDonation(updatedDonation)) {
                showSuccess("Success", "Donation updated successfully");
                refreshDonationsTable();
            } else {
                showError("Error", "Failed to update donation");
            }

        } catch (NumberFormatException e) {
            showError("Invalid Input", "Volume must be a number");
        } catch (Exception e) {
            showError("RMI Error", "Error updating donation: " + e.getMessage());
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // 1. Get and trim input
    String donorIdStr = JOptionPane.showInputDialog(
        this,
        "Enter Donor ID to search:",
        "Search Donations by Donor",
        JOptionPane.PLAIN_MESSAGE
    );

    if (donorIdStr == null) {
        return; // user cancelled
    }

    donorIdStr = donorIdStr.trim();

    // 2. Empty input shows all donations
    if (donorIdStr.isEmpty()) {
        refreshDonationsTable(); // Already uses RMI if updated
        return;
    }

    // 3. Validate format
    if (!donorIdStr.matches("\\d{1,6}")) {
        showError("Invalid ID", "Donor ID must be 1-6 digits");
        return;
    }

    try {
        int donorId = Integer.parseInt(donorIdStr);
        if (donorId <= 0) {
            showError("Invalid ID", "Donor ID must be positive");
            return;
        }

        // 4. Check donor existence via RMI
        if (!donorService.donorExists(donorId)) {
            showError("Not Found", "No donor found with ID: " + donorId);
            return;
        }

        // 5. Fetch donations via RMI
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        List<Donation> donations = donationService.getDonationsByDonor(donorId);

        if (donations.isEmpty()) {
            showSuccess("No Results", "No donations found for Donor ID: " + donorId);
        } else {
            for (Donation d : donations) {
                model.addRow(new Object[] {
                    d.getDonationId(),
                    d.getDonorId(),
                    d.getDonationDate(),
                    d.getQuantity(),
                    d.getRemarks()
                });
            }
        }

    } catch (NumberFormatException e) {
        showError("System Error", "Invalid number format");
    } catch (Exception e) {
        showError("Remote Error", "Search failed: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void exportPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPdfButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save PDF Report");
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        try {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".pdf")) {
                filePath += ".pdf";
            }

            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            document.add(new Paragraph("Donation Report"));
            document.add(new Paragraph("Generated on: " + new java.util.Date().toString()));
            document.add(new Paragraph(" "));

            PdfPTable pdfTable = new PdfPTable(jTable1.getColumnCount());
            TableModel model = jTable1.getModel();

            // Add table headers
            for (int i = 0; i < model.getColumnCount(); i++) {
                pdfTable.addCell(new PdfPCell(new Paragraph(model.getColumnName(i))));
            }

            // Add table rows
            for (int rows = 0; rows < model.getRowCount(); rows++) {
                for (int cols = 0; cols < model.getColumnCount(); cols++) {
                    Object value = model.getValueAt(rows, cols);
                    pdfTable.addCell(value != null ? value.toString() : "");
                }
            }

            document.add(pdfTable);
            document.close();

            JOptionPane.showMessageDialog(this, "‚úÖ PDF exported successfully!");

        } catch (IOException | DocumentException e) {
            JOptionPane.showMessageDialog(this, "‚ùå Error exporting PDF: " + e.getMessage(), "Export Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_exportPdfButtonActionPerformed
//HELPER METHODS
    private void refreshDonationsTable() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0);
    try {
        // üß† RMI-based call instead of DonationDao
        List<Donation> donations = donationService.getAllDonations();

        for (Donation d : donations) {
            model.addRow(new Object[]{
                d.getDonationId(),
                d.getDonorId(),
                d.getDonationDate(),
                d.getQuantity(),
                d.getRemarks()
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "‚ùå Failed to load donations: " + e.getMessage(),
                "Remote Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


private void clearFields() {
    dateField.setText("");
    volumeField.setText("");
    remarksField.setText("");
}

private void showError(String title, String message) {
    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
}

private void showSuccess(String title, String message) {
    JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);
}
 public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DonationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DonationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DonationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DonationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DonationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField dateField;
    private javax.swing.JButton deleteDonationBtn;
    private javax.swing.JComboBox<String> donorComboBox;
    private javax.swing.JButton exportPdfButton;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton recordDonationBtn;
    private javax.swing.JTextField remarksField;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTextField volumeField;
    // End of variables declaration//GEN-END:variables
}
