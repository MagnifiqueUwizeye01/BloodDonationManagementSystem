/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;
import model.BloodInventory;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.rmi.registry.Registry;
import java.rmi.registry.LocateRegistry;
import rmi.BloodInventoryService; // ‚úÖ RMI service interface
import java.rmi.RemoteException; // ‚úÖ For handling remote calls


import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.io.FileOutputStream;
import java.io.IOException;



/**
 *
 * @author User
 */
public class BloodInventoryPanel extends javax.swing.JPanel {
    
    private BloodInventoryService bloodInventoryService; // üí° RMI Service
    
    public BloodInventoryPanel(BloodInventoryService bloodInventoryService) {
    this.bloodInventoryService = bloodInventoryService;
    initComponents();
    loadInventoryData(); // use RMI
}

 


    /** Creates new form BloodInventoryPanel */
   public BloodInventoryPanel() {
    initComponents();
    
    try {
        java.rmi.registry.Registry registry = java.rmi.registry.LocateRegistry.getRegistry("localhost", 5000);
        bloodInventoryService = (BloodInventoryService) registry.lookup("bloodInventory");
        System.out.println("[BloodInventoryPanel] ‚úÖ Connected to BloodInventoryService via RMI");

        loadInventoryData(); // Load using RMI
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Failed to connect to BloodInventoryService: " + e.getMessage(),
            "RMI Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


    
   private void loadInventoryData() {
    try {
        java.util.List<BloodInventory> inventoryList = bloodInventoryService.getInventory(); // ‚úÖ Now using RMI

        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Blood Type", "Total Donated", "Total Used", "Stock"});

        for (BloodInventory bi : inventoryList) {
            model.addRow(new Object[]{
                bi.getBloodType(),
                bi.getTotalDonated(),
                bi.getTotalUsed(),
                bi.getStock()
            });
        }

        inventoryTable.setModel(model);
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Failed to load inventory via RMI: " + e.getMessage(),
            "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}




    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        refrshButton = new javax.swing.JButton();
        exportPdfButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(inventoryTable);

        refrshButton.setBackground(new java.awt.Color(153, 204, 255));
        refrshButton.setText("Refresh");
        refrshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refrshButtonActionPerformed(evt);
            }
        });

        exportPdfButton.setBackground(new java.awt.Color(153, 204, 255));
        exportPdfButton.setText("Export as PDF");
        exportPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPdfButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BLOOD STOCK");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(refrshButton)
                        .addGap(289, 289, 289)
                        .addComponent(exportPdfButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 828, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refrshButton)
                    .addComponent(exportPdfButton))
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(216, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void exportPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPdfButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save PDF Report");
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(fileChooser.getSelectedFile() + ".pdf"));
            document.open();

            document.add(new Paragraph("Blood Inventory Report"));
            document.add(new Paragraph("Generated on: " + new java.util.Date()));
            document.add(new Paragraph(" ")); // Spacer

            // üîÅ Use your actual JTable variable name here:
            PdfPTable pdfTable = new PdfPTable(inventoryTable.getColumnCount());
            TableModel model = inventoryTable.getModel();

            // Add table headers
            for (int i = 0; i < model.getColumnCount(); i++) {
                pdfTable.addCell(new PdfPCell(new Paragraph(model.getColumnName(i))));
            }

            // Add table rows
            for (int rows = 0; rows < model.getRowCount(); rows++) {
                for (int cols = 0; cols < model.getColumnCount(); cols++) {
                    Object value = model.getValueAt(rows, cols);
                    pdfTable.addCell(value != null ? value.toString() : "");
                }
            }

            document.add(pdfTable);
            document.close();

            JOptionPane.showMessageDialog(this, "‚úÖ PDF exported successfully!",
                    "Export Successful", JOptionPane.INFORMATION_MESSAGE);

        } catch (DocumentException | IOException e) {
            JOptionPane.showMessageDialog(this, "‚ùå Failed to export PDF: " + e.getMessage(),
                    "Export Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_exportPdfButtonActionPerformed

    private void refrshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refrshButtonActionPerformed
        // TODO add your handling code here:
        try {
        loadInventoryData();  // ‚úÖ this should be your method to reload the inventory table
        JOptionPane.showMessageDialog(this, "‚úÖ Blood inventory refreshed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "‚ùå Failed to refresh inventory: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }//GEN-LAST:event_refrshButtonActionPerformed

    public static void main(String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
        public void run() {
            javax.swing.JFrame frame = new javax.swing.JFrame("Blood Inventory");
            frame.setContentPane(new BloodInventoryPanel());
            frame.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportPdfButton;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refrshButton;
    // End of variables declaration//GEN-END:variables

}
