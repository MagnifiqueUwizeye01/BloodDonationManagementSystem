/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.BloodRequestDao;
import model.BloodRequest;
import model.User;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import rmi.BloodRequestService;
import rmi.BloodInventoryService;


import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.event.ActionEvent;
import java.io.FileOutputStream;
import java.io.IOException;



/**
 *
 * @author User
 */
public class BloodRequestPanel extends javax.swing.JPanel {
    private User currentUser;
    private BloodRequestDao requestDao;
    private BloodRequestService bloodRequestService; // ✅ Add this field
    private BloodInventoryService bloodInventoryService; // ✅ RMI reference

public BloodRequestPanel(User currentUser, BloodRequestService bloodRequestService) {
    this.currentUser = currentUser;
    this.bloodRequestService = bloodRequestService;
    this.bloodInventoryService = bloodInventoryService;
    initComponents();
    this.setPreferredSize(new Dimension(1000, 700));
    loadRequestsToTable(); // Will use RMI inside
    setupTableSelectionListener();
}
  
    



    
    // Constructor modification
    public BloodRequestPanel(User currentUser) {
    this.currentUser = currentUser;
    
    try {
    java.rmi.registry.Registry registry = java.rmi.registry.LocateRegistry.getRegistry("localhost", 5000);
    bloodRequestService = (BloodRequestService) registry.lookup("bloodRequest");
    System.out.println("[BloodRequestPanel] ✅ Connected to BloodRequestService");
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, "❌ Could not connect to BloodRequestService: " + e.getMessage(),
        "Connection Error", JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}

    this.requestDao = new BloodRequestDao();
    initComponents();
    this.setPreferredSize(new Dimension(1000, 700));
    loadRequestsToTable(); // Add this to load data on startup
    setupTableSelectionListener(); // Add row selection handler
}

    /**
     * Creates new form BloodRequestPanel
     */
    public BloodRequestPanel() {
        initComponents();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        patientNameField = new javax.swing.JTextField();
        quantityField = new javax.swing.JTextField();
        bloodTypeComboBox = new javax.swing.JComboBox<>();
        requestDateField = new javax.swing.JTextField();
        statusComboBox = new javax.swing.JComboBox<>();
        addRequestBtn = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDeleteRequest = new javax.swing.JButton();
        tablePanel = new javax.swing.JPanel();
        requestsScrollPane = new javax.swing.JScrollPane();
        requestsTable = new javax.swing.JTable();
        exportPdfButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 15, 15));

        jPanel2.setBackground(new java.awt.Color(220, 20, 60));
        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 15, 10, 15));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BLOOD REQUEST MANAGEMENT");
        jPanel2.add(jLabel1, java.awt.BorderLayout.CENTER);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Patient Name:");

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Request Date YYYY-MM-DD:");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Quantity Needed (ml):");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Blood Type:");

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Status:");

        patientNameField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        patientNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameFieldActionPerformed(evt);
            }
        });

        quantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityFieldActionPerformed(evt);
            }
        });

        bloodTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }));
        bloodTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodTypeComboBoxActionPerformed(evt);
            }
        });

        requestDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestDateFieldActionPerformed(evt);
            }
        });

        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Fulfilled", "Cancelled" }));
        statusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusComboBoxActionPerformed(evt);
            }
        });

        addRequestBtn.setBackground(new java.awt.Color(220, 20, 60));
        addRequestBtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addRequestBtn.setForeground(new java.awt.Color(255, 255, 255));
        addRequestBtn.setText("Add Request");
        addRequestBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 15, 10, 15));
        addRequestBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addRequestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRequestBtnActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(43, 87, 153));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDeleteRequest.setBackground(new java.awt.Color(220, 20, 60));
        btnDeleteRequest.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteRequest.setText("Delete");
        btnDeleteRequest.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDeleteRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRequestActionPerformed(evt);
            }
        });

        tablePanel.setBackground(new java.awt.Color(255, 235, 240));
        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        requestsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Patient", "Blood Type", "Quantity (ml)", "Date", "Status"
            }
        ));
        requestsScrollPane.setViewportView(requestsTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(requestsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addComponent(requestsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap())
        );

        exportPdfButton.setBackground(new java.awt.Color(153, 204, 255));
        exportPdfButton.setText("Export to PDF");
        exportPdfButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPdfButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(178, 178, 178)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(addRequestBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bloodTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(requestDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(211, 211, 211))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDeleteRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportPdfButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tablePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bloodTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRequestBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                .addComponent(exportPdfButton))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(492, Short.MAX_VALUE)
                    .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(54, 54, 54)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void patientNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameFieldActionPerformed

    private void quantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityFieldActionPerformed

    private void bloodTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodTypeComboBoxActionPerformed

    private void requestDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestDateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_requestDateFieldActionPerformed

    private void statusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusComboBoxActionPerformed

    private void addRequestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRequestBtnActionPerformed
        if (!validateRequest()) return;

    try {
        BloodRequest request = createRequestFromForm();

        int result = bloodRequestService.saveRequest(request);
        if (result > 0) {
            JOptionPane.showMessageDialog(this, "Request added!");
            clearForm();
            loadRequestsToTable();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add request", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception ex) {
        showError("Error adding request: " + ex.getMessage());
        ex.printStackTrace();
    }
    }//GEN-LAST:event_addRequestBtnActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Integer requestId = (Integer) btnUpdate.getClientProperty("requestId");
    if (requestId == null) {
        JOptionPane.showMessageDialog(this, "Please select a request first");
        return;
    }

    if (!validateRequest()) return;

    try {
        BloodRequest request = createRequestFromForm();
        request.setId(requestId);

        boolean updated = bloodRequestService.updateRequest(request);
        if (updated) {
            JOptionPane.showMessageDialog(this, "Request updated!");
            clearForm();
            loadRequestsToTable();
        } else {
            showError("Update failed: No rows affected");
        }
    } catch (Exception ex) {
        showError("Error updating request: " + ex.getMessage());
        ex.printStackTrace();
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRequestActionPerformed
        Integer requestId = (Integer) btnUpdate.getClientProperty("requestId");
    if (requestId == null) {
        JOptionPane.showMessageDialog(this, "Please select a request first");
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this,
        "Delete this request?", "Confirm", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        try {
            // ✅ RMI call to delete blood request
            boolean deleted = bloodRequestService.deleteRequest(requestId);
            if (deleted) {
                JOptionPane.showMessageDialog(this, "Request deleted!");
                clearForm();
                loadRequestsToTable();
            } else {
                showError("Failed to delete the request.");
            }
        } catch (Exception ex) {
            showError("Error deleting request: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnDeleteRequestActionPerformed

    private void exportPdfButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPdfButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save Blood Requests PDF Report");
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        try {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath();

            if (!filePath.toLowerCase().endsWith(".pdf")) {
                filePath += ".pdf";
            }

            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(filePath));
            document.open();

            document.add(new Paragraph("Blood Request Report"));
            document.add(new Paragraph("Generated on: " + new java.util.Date().toString()));
            document.add(new Paragraph(" "));

            PdfPTable pdfTable = new PdfPTable(requestsTable.getColumnCount()); // assuming your table is jTable1
            TableModel model = requestsTable.getModel();

            // Add headers
            for (int i = 0; i < model.getColumnCount(); i++) {
                pdfTable.addCell(new PdfPCell(new Paragraph(model.getColumnName(i))));
            }

            // Add rows
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    Object value = model.getValueAt(row, col);
                    pdfTable.addCell(value != null ? value.toString() : "");
                }
            }

            document.add(pdfTable);
            document.close();

            JOptionPane.showMessageDialog(this, "✅ PDF exported successfully!");

        } catch (IOException | DocumentException e) {
            JOptionPane.showMessageDialog(this, "❌ Error exporting PDF: " + e.getMessage(), "Export Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_exportPdfButtonActionPerformed

     //HELPER METHODS
    private boolean validateRequest() {
    StringBuilder errors = new StringBuilder();

    // Validate patient name
    String patientName = patientNameField.getText().trim();
    if (patientName.isEmpty()) {
        errors.append("- Patient name is required\n");
    } else if (!patientName.matches("[a-zA-Z ]+")) {
        errors.append("- Patient name should contain only letters and spaces\n");
    }

    // Validate quantity
    try {
        int qty = Integer.parseInt(quantityField.getText().trim());
        if (qty <= 0) {
            errors.append("- Quantity must be greater than 0\n");
        } else if (qty > 2000) {
            errors.append("- Maximum quantity is 2000ml\n");
        }
    } catch (NumberFormatException e) {
        errors.append("- Quantity must be a number\n");
    }

    // Validate date format and check if it's not in the past
    String dateText = requestDateField.getText().trim();
    if (!dateText.matches("\\d{4}-\\d{2}-\\d{2}")) {
        errors.append("- Date must be in YYYY-MM-DD format\n");
    } else {
        try {
            java.time.LocalDate inputDate = java.time.LocalDate.parse(dateText);
            java.time.LocalDate today = java.time.LocalDate.now();
            if (inputDate.isBefore(today)) {
                errors.append("- Request date cannot be in the past\n");
            }
        } catch (Exception e) {
            errors.append("- Invalid date provided\n");
        }
    }

    // Validate blood type selection
    String bloodType = (String) bloodTypeComboBox.getSelectedItem();
    if (bloodType == null || bloodType.trim().isEmpty()) {
        errors.append("- Please select a blood type\n");
    }

    // Validate status selection
    String status = (String) statusComboBox.getSelectedItem();
    if (status == null || status.trim().isEmpty()) {
        errors.append("- Please select a request status\n");
    }

    // Show error messages if any
    if (errors.length() > 0) {
        JOptionPane.showMessageDialog(this,
            "Please correct the following errors:\n" + errors.toString(),
            "Validation Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    return true;
}


private void clearForm() {
    patientNameField.setText("");
    quantityField.setText("");
    requestDateField.setText("");
    bloodTypeComboBox.setSelectedIndex(0);
    statusComboBox.setSelectedIndex(0);
    
    // Reset button states
    btnUpdate.setText("Update");
    btnUpdate.putClientProperty("requestId", null);
    addRequestBtn.setEnabled(true);
}

private void resetFormState() {
    btnUpdate.setText("Update");
    btnUpdate.putClientProperty("requestId", null);
    addRequestBtn.setEnabled(true);
}

private void loadRequestsToTable() {
    try {
        DefaultTableModel model = (DefaultTableModel) requestsTable.getModel();
        model.setRowCount(0); // Clear previous data

        // ✅ Use RMI to fetch all blood requests
        List<BloodRequest> requests = bloodRequestService.getAllRequests();

        for (BloodRequest r : requests) {
            model.addRow(new Object[]{
                r.getId(),
                r.getPatientName(),
                r.getBloodType(),
                r.getQuantity(),
                r.getRequestDate(),
                r.getStatus()
            });
        }

    } catch (Exception ex) {
        showError("Error loading blood requests via RMI: " + ex.getMessage());
        ex.printStackTrace();
    }
}


private void setupTableSelectionListener() {
    requestsTable.getSelectionModel().addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            int row = requestsTable.getSelectedRow();
            if (row >= 0) {
                populateFormFromTable(row);
            }
        }
    });
}

private void populateFormFromTable(int row) {
    DefaultTableModel model = (DefaultTableModel) requestsTable.getModel();
    patientNameField.setText(model.getValueAt(row, 1).toString());
    bloodTypeComboBox.setSelectedItem(model.getValueAt(row, 2));
    quantityField.setText(model.getValueAt(row, 3).toString());
    requestDateField.setText(model.getValueAt(row, 4).toString());
    statusComboBox.setSelectedItem(model.getValueAt(row, 5));
    btnUpdate.putClientProperty("requestId", model.getValueAt(row, 0));
}


private BloodRequest createRequestFromForm() {
    return new BloodRequest(
        0, // ID will be set for updates
        patientNameField.getText(),
        (String) bloodTypeComboBox.getSelectedItem(),
        Integer.parseInt(quantityField.getText()),
        requestDateField.getText(),
        (String) statusComboBox.getSelectedItem()
    );
}

private void showError(String message) {
    JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
}





    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BloodRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BloodRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BloodRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BloodRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
      
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRequestBtn;
    private javax.swing.JComboBox<String> bloodTypeComboBox;
    private javax.swing.JButton btnDeleteRequest;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton exportPdfButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField patientNameField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JTextField requestDateField;
    private javax.swing.JScrollPane requestsScrollPane;
    private javax.swing.JTable requestsTable;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables
}
